import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from "../styles/Home.module.css";
import { useAccount, useProvider } from 'wagmi';
import {useState, useEffect} from "react";
import {Alchemy, Network}from "alchemy-sdk";
import axios from 'axios';
import NFTCard  from "../src/NFTCard";
import { Button ,TextField} from "@mui/material"
import { create } from "ipfs-http-client";




const Home = () => {
  const { address,isConnected} = useAccount();
  const [alchemy, setAlchemy]:any =useState(null);
  const [nfts, setNfts]:any = useState([]);
  const [openForm, setOpenForm]:any = useState(false);
  const[title,setTitle]:any = useState(""); 
  const[description, setDescription]:any = useState("")
  useEffect(() => {
    const settings = {
      apiKey: "KSM93xJEEY9dwqbegaro7RrB8sEiNsyu", // Replace with your Alchemy API Key.
      network: Network.ETH_GOERLI, // Replace with your network.
    };
    
    const alchemy = new Alchemy(settings);// setting new client

    setAlchemy(alchemy);
    
  },[]);

  useEffect(() =>{
    if (isConnected && alchemy && address){
      fetchNFTs(address);
    }

  },[isConnected,alchemy,address]);

 async function fetchNFTs(address:string){
  const nftsForOwner = await alchemy.nft.getNftsForOwner(address);
  for(let index=0; index < nftsForOwner?.ownedNfts.length; index++) {
    let currentNFT = nftsForOwner?.ownedNfts[index];
    const metadata = await axios(currentNFT?.tokenUri?.raw);//uncomment this after we see nfts in opensea
    console.log(metadata.data);
    nftsForOwner.ownedNFTs[index].metadata=metadata.data;//adding a key and storing particular nfts

  }
  setNfts(nftsForOwner.ownedNFTs);
 }

  const uploadImage= async(e:any)=>{
    const auth ="Basic"+Buffer.from("2I81ZltaAwsgMkBN3Mj8XUj9eF7"+":"+"55eb0d8b9b8acd2c1f35edf5c52c6a3f").toString("base64")
    console.log(e.target.files[0])
    const client=create({url: "https://ipfs.infura.io:5001",
    headers:{
      authorization: auth,
    },
  
  });
    const {cid}=await client.add("Helloworld");
    console.log(client)

  };


  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <Button onClick={()=>setOpenForm(true)} variant ="outlined">Create NFT</Button>
      </main>
     {openForm ? (
     <div style={{
      display:"flex",
      justifyContent: "center",
      alignItems: "center",
      flexDirection: "column",
  
     }}>
      <h2>Create your NFT</h2>
      <TextField style={{
        width:"350px",
        margin:"10px",
      }}id="outlined-basic"
        label="Title"
        variant="outlined"
        onChange={(e)=>setTitle(e.target.value)}
        
      />

      <TextField style={{
        width:"350px",
        margin:"10px",
      }}multiline id="outlined-basic" 
       label="Description" 
       variant="outlined"
       onChange={(e)=>setDescription(e.target.value)}

       />

      <div>
      <label style={{
        justifySelf:"flex-start",alignSelf:"flex-start",
      }}htmlFor="nft">Choose a NFT Asset</label>

      <br></br>
      <input 
      type="file" 
      onChange={(e)=>uploadImage(e)}
      id ="nft" 
      accept="image/png,image/jpeg"/>

      </div>
     
     </div>
     ):(<div style={{
        display:"flex",
        justifyContent:"center",
        alignItems: "center",
      }}>
        {nfts.length ? nfts?.map((nft:any,index:any)=>(
        <NFTCard nft={nft} key={index}></NFTCard>
        )): <div>No NFTs available</div>}
      </div>)}
      
       
    </div>
  );
};

export default Home;
